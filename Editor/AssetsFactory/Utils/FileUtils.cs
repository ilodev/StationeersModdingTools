using System.IO;
using UnityEditor;
using UnityEngine;

namespace ilodev.stationeersmods.tools.assetsfactory
{
    public static class FileUtils 
    {
        /// <summary>
        /// Creates a file if it doesn't exist ensuring the folder tree exists and refreshes the asset database.
        /// </summary>
        /// <param name="path"></param>
        /// <param name="content"></param>
        /// <param name="overwrite"></param>
        public static void CreateTextFile(string path, string content, bool overwrite = false)
        {
            string folder = Path.GetDirectoryName(path);
            EnsureFolders(folder);
            if (!File.Exists(path) || overwrite)
            {
                File.WriteAllText(path, content);
                AssetDatabase.Refresh();
            }
        }

        /// <summary>
        /// Create folder tree if it doesn't exist
        /// </summary>
        /// <param name="path"></param>
        public static void EnsureFolders(string path)
        {
            if (!Directory.Exists(path))
                Directory.CreateDirectory(path);
        }

        /// <summary>
        /// Create a script with custom attributes
        /// </summary>
        /// <param name="className"></param>
        /// <param name="baseClass"></param>
        /// <param name="menuName"></param>
        /// <param name="namespaceName"></param>
        /// <returns></returns>
        public static string GenerateScript(string className, string baseClass, string menuName, string namespaceName)
        {
            string indent = "    ";
            string nl = "\r\n";

            bool hasNamespace = !string.IsNullOrEmpty(namespaceName);

            string classCode =
        $@"{(hasNamespace ? indent : "")}[AddComponentMenu(""{menuName}"")]
{(hasNamespace ? indent : "")}public class {className} : {baseClass}
{(hasNamespace ? indent : "")}{{
{(hasNamespace ? indent : "")}  // DO NOT EDIT THIS FILE. CREATE A NEW CLASS IF YOU NEED CUSTOM LOGIC.
{(hasNamespace ? indent : "")}}}";

            return
        $@"using UnityEngine;

{(hasNamespace ? $"namespace {namespaceName}{nl}{{" : "")}
{classCode}
{(hasNamespace ? "}" : "")}
";
        }

    }
}
